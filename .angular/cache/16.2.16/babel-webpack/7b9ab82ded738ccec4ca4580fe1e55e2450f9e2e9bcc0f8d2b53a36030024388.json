{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, EventEmitter, Output, NgModule } from '@angular/core';\nimport ImageKit from 'imagekit-javascript';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction IkUploadComponent_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 2);\n    i0.ɵɵlistener(\"change\", function IkUploadComponent_input_0_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.handleFileInput($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction IkUploadComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 3);\n    i0.ɵɵlistener(\"change\", function IkUploadComponent_ng_template_1_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.handleFileInput($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nconst SDK_VERSION = '5.1.0';\nclass ImageKitConfiguration {}\nlet ImagekitService = /*#__PURE__*/(() => {\n  class ImagekitService {\n    constructor(configuration) {\n      this.configuration = configuration;\n      configuration.sdkVersion = `angular-${SDK_VERSION}`, this._ikInstance = new ImageKit(this.configuration);\n    }\n    get ikInstance() {\n      return this._ikInstance;\n    }\n    getUrl(config) {\n      const url = this._ikInstance.url(config);\n      return url;\n    }\n  }\n  ImagekitService.ɵfac = function ImagekitService_Factory(t) {\n    return new (t || ImagekitService)(i0.ɵɵinject(ImageKitConfiguration));\n  };\n  ImagekitService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ImagekitService,\n    factory: ImagekitService.ɵfac\n  });\n  return ImagekitService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IkImageComponent = /*#__PURE__*/(() => {\n  class IkImageComponent {\n    constructor(el, imagekit) {\n      this.el = el;\n      this.imagekit = imagekit;\n      this.transformation = [];\n      this.url = '';\n      this.lqipUrl = '';\n      this.onImageLoaded = event => {\n        const {\n          loading,\n          lqipUrl,\n          url\n        } = this;\n        if (loading !== 'lazy' && event.srcElement.src === lqipUrl) {\n          this.loadImage(this, url);\n        }\n      };\n    }\n    ngOnInit() {\n      const options = this.src ? {\n        src: this.src\n      } : {\n        path: this.path\n      };\n      options.urlEndpoint = this.urlEndpoint ? this.urlEndpoint : this.imagekit._ikInstance.options.urlEndpoint;\n      options.transformation = this.transformation;\n      options.transformationPosition = this.transformationPosition;\n      options.queryParameters = this.queryParameters;\n      options.lqip = this.lqip;\n      this.setUrl(options);\n    }\n    ngOnChanges() {\n      this.ngOnInit();\n      this.ngAfterViewInit();\n    }\n    ngAfterViewInit() {\n      if (this.loading == 'lazy') {\n        const that = this;\n        if (this.lqipUrl) {\n          // If given LQIP, use that first\n          this.loadImage(this, this.lqipUrl);\n        }\n        const imageObserver = new IntersectionObserver((entry, observer) => {\n          // Always load the original image when intersecting\n          that.handleIntersectionObserver(entry, observer, that.loadImage, that, that.url);\n        });\n        imageObserver.observe(this.el.nativeElement);\n      } else {\n        // If given LQIP, use that first\n        this.loadImage(this, this.lqipUrl ? this.lqipUrl : this.url);\n      }\n    }\n    handleIntersectionObserver(entry, observer, loadImageFunc, context, url) {\n      if (entry[0] && entry[0].isIntersecting) {\n        let image = entry[0].target;\n        loadImageFunc(context, url);\n        observer.unobserve(image);\n      }\n    }\n    setUrl(options) {\n      const config = this.getConfigObject(options);\n      this.url = this.imagekit.getUrl(config);\n      if (options.lqip && options.lqip.active === true) {\n        this.lqipUrl = this.constructLqipUrl(options, options.lqip);\n      }\n    }\n    constructLqipUrl(options, lqip) {\n      if (lqip && lqip.active) {\n        var quality = Math.round(lqip.quality || lqip.threshold || 20);\n        var blur = Math.round(lqip.blur || 6);\n        var newTransformation = options.transformation ? [...options.transformation] : [];\n        if (lqip.raw && typeof lqip.raw === \"string\" && lqip.raw.trim() != \"\") {\n          newTransformation.push({\n            raw: lqip.raw.trim()\n          });\n        } else {\n          newTransformation.push({\n            quality: String(quality),\n            blur: String(blur)\n          });\n        }\n        return this.imagekit.ikInstance.url(Object.assign(Object.assign({}, options), {\n          transformation: newTransformation\n        }));\n      }\n    }\n    getConfigObject(options) {\n      const config = {\n        transformation: options.transformation\n      };\n      if (options.urlEndpoint) {\n        config['urlEndpoint'] = options.urlEndpoint;\n      } else {\n        throw new Error('Missing urlEndpoint initialization!');\n      }\n      if (options.queryParameters) {\n        config['queryParameters'] = options.queryParameters;\n      }\n      if (options.src) {\n        config['src'] = options.src;\n        config['transformationPosition'] = 'query';\n      } else if (options.path) {\n        config['path'] = options.path;\n        if (options.transformationPosition) {\n          config['transformationPosition'] = options.transformationPosition;\n        }\n      } else {\n        throw new Error('Missing src / path during initialization!');\n      }\n      return config;\n    }\n    loadImage(context, url) {\n      const nativeElement = context.el.nativeElement;\n      const attributes = nativeElement.attributes;\n      const attrsToSet = context.namedNodeMapToObject(attributes);\n      attrsToSet['src'] = url;\n      const image = nativeElement.children[0];\n      context.setElementAttributes(image, attrsToSet);\n    }\n    namedNodeMapToObject(source) {\n      let target = {};\n      Object.keys(source).forEach(index => {\n        const name = source[index].name;\n        const value = source[index].value;\n        target[name] = value;\n      });\n      return target;\n    }\n    setElementAttributes(element, attributesLiteral) {\n      Object.keys(attributesLiteral).filter(attrName => attrName !== 'loading').forEach(attrName => {\n        element.setAttribute(attrName, attributesLiteral[attrName]);\n      });\n    }\n  }\n  IkImageComponent.ɵfac = function IkImageComponent_Factory(t) {\n    return new (t || IkImageComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ImagekitService));\n  };\n  IkImageComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: IkImageComponent,\n    selectors: [[\"ik-image\"]],\n    inputs: {\n      src: \"src\",\n      path: \"path\",\n      urlEndpoint: \"urlEndpoint\",\n      transformation: \"transformation\",\n      transformationPosition: \"transformationPosition\",\n      queryParameters: \"queryParameters\",\n      lqip: \"lqip\",\n      loading: \"loading\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"src\", \"\", 3, \"load\"]],\n    template: function IkImageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"img\", 0);\n        i0.ɵɵlistener(\"load\", function IkImageComponent_Template_img_load_0_listener($event) {\n          return ctx.onImageLoaded($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return IkImageComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IkVideoComponent = /*#__PURE__*/(() => {\n  class IkVideoComponent {\n    constructor(el, imagekit) {\n      this.el = el;\n      this.imagekit = imagekit;\n      this.transformation = [];\n      this.url = '';\n    }\n    ngOnInit() {\n      const options = this.src ? {\n        src: this.src\n      } : {\n        path: this.path\n      };\n      options.transformation = this.transformation;\n      options.transformationPosition = this.transformationPosition;\n      options.urlEndpoint = this.urlEndpoint;\n      options.queryParameters = this.queryParameters;\n      this.setUrl(options);\n    }\n    ngAfterViewInit() {\n      this.loadVideo(this.url);\n    }\n    loadVideo(url) {\n      const nativeElement = this.el.nativeElement;\n      const attributes = nativeElement.attributes;\n      const attrsToSet = this.namedNodeMapToObject(attributes);\n      attrsToSet['src'] = url;\n      const video = nativeElement.children[0];\n      this.setElementAttributes(video, attrsToSet);\n    }\n    namedNodeMapToObject(source) {\n      let target = {};\n      Object.keys(source).forEach(index => {\n        const name = source[index].name;\n        const value = source[index].value;\n        target[name] = value;\n      });\n      return target;\n    }\n    setUrl(options) {\n      const config = this.getConfigObject(options);\n      this.url = this.imagekit.getUrl(config);\n    }\n    getConfigObject(options) {\n      const config = {\n        transformation: options.transformation\n      };\n      if (options.urlEndpoint) {\n        config['urlEndpoint'] = options.urlEndpoint;\n      } else {\n        throw new Error('Missing urlEndpoint initialization!');\n      }\n      if (options.queryParameters) {\n        config['queryParameters'] = options.queryParameters;\n      }\n      if (options.src) {\n        config['src'] = options.src;\n        config['transformationPosition'] = 'query';\n      } else if (options.path) {\n        config['path'] = options.path;\n        if (options.transformationPosition) {\n          config['transformationPosition'] = options.transformationPosition;\n        }\n      } else {\n        throw new Error('Missing src / path during initialization!');\n      }\n      return config;\n    }\n    setElementAttributes(element, attributesLiteral) {\n      Object.keys(attributesLiteral).forEach(attrName => {\n        element.setAttribute(attrName, attributesLiteral[attrName]);\n      });\n    }\n  }\n  IkVideoComponent.ɵfac = function IkVideoComponent_Factory(t) {\n    return new (t || IkVideoComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ImagekitService));\n  };\n  IkVideoComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: IkVideoComponent,\n    selectors: [[\"ik-video\"]],\n    inputs: {\n      urlEndpoint: \"urlEndpoint\",\n      path: \"path\",\n      src: \"src\",\n      transformation: \"transformation\",\n      transformationPosition: \"transformationPosition\",\n      queryParameters: \"queryParameters\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[\"controls\", \"\"], [3, \"src\"]],\n    template: function IkVideoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"video\", 0);\n        i0.ɵɵelement(1, \"source\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"src\", ctx.src, i0.ɵɵsanitizeUrl);\n      }\n    },\n    encapsulation: 2\n  });\n  return IkVideoComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IkUploadComponent = /*#__PURE__*/(() => {\n  class IkUploadComponent {\n    constructor(el, imagekit) {\n      this.el = el;\n      this.imagekit = imagekit;\n      this.onError = new EventEmitter();\n      this.onSuccess = new EventEmitter();\n      this.fileToUpload = null;\n      this.handleAuthResponse = ({\n        signature,\n        token,\n        expire\n      }, ik, params, options, progressCb) => {\n        ik.upload(Object.assign(Object.assign({}, params), {\n          signature,\n          token,\n          expire\n        }), (err, result) => {\n          this.handleUploadResponse(err, result, options, progressCb);\n        });\n      };\n    }\n    ngAfterViewInit() {\n      this.buttonRef && this.buttonRef.addEventListener('click', () => {\n        this.el.nativeElement.children[0].click();\n      });\n    }\n    abort() {\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n    }\n    handleFileInput(e) {\n      // Using IK-upload\n      const files = e.target.files;\n      this.fileToUpload = files.item(0);\n      const options = {\n        file: this.fileToUpload,\n        fileName: this.fileName || this.fileToUpload.name,\n        useUniqueFileName: this.useUniqueFileName,\n        tags: this.tags,\n        folder: this.folder,\n        customMetadata: this.customMetadata,\n        isPrivateFile: this.isPrivateFile,\n        overwriteFile: this.overwriteFile,\n        overwriteAITags: this.overwriteAITags,\n        overwriteTags: this.overwriteTags,\n        overwriteCustomMetadata: this.overwriteCustomMetadata,\n        customCoordinates: this.customCoordinates,\n        responseFields: this.responseFields,\n        extensions: this.extensions,\n        webhookUrl: this.webhookUrl,\n        onError: this.onError,\n        onSuccess: this.onSuccess,\n        transformation: this.transformation,\n        checks: this.checks\n      };\n      // Custom validation\n      if (!this.checkCustomFileValidation(options.file)) {\n        return;\n      }\n      if (!this.checkAuthenticator(options)) {\n        return;\n      }\n      this.startIkUpload(e, options);\n    }\n    checkCustomFileValidation(file) {\n      if (this.validateFile && typeof this.validateFile === 'function') {\n        return this.validateFile(file);\n      }\n      return true;\n    }\n    checkAuthenticator(options) {\n      if (!this.authenticator || typeof this.authenticator !== \"function\" || this.authenticator.length !== 0 || !(this.authenticator() instanceof Promise)) {\n        return this.throwError(\"The authenticator function is not provided or is not a function.\", options);\n      }\n      return true;\n    }\n    throwError(message, options) {\n      if (options && options.onError instanceof EventEmitter) {\n        options.onError.emit({\n          message: message || \"Something went wrong.\"\n        });\n      }\n      return false;\n    }\n    startIkUpload(e, options) {\n      // Custom upload-start tracker\n      if (this.onUploadStart && typeof this.onUploadStart === 'function') {\n        this.onUploadStart(e);\n      }\n      // Custom upload-progress tracker\n      options.xhr = new XMLHttpRequest();\n      this.xhr = options.xhr;\n      const params = this.getUploadParams(options);\n      const progressCb = this.createUploadProgressMonitor(options.xhr);\n      const ik = this.getIkInstance();\n      const authPromise = this.authenticator();\n      authPromise.then(obj => this.handleAuthResponse(obj, ik, params, options, progressCb)).catch(data => {\n        var error;\n        if (data instanceof Array) {\n          error = data[0];\n        } else {\n          error = data;\n        }\n        this.throwError(String(error), options);\n      });\n    }\n    getIkInstance() {\n      if (this.publicKey === undefined || this.urlEndpoint === undefined) {\n        return this.imagekit.ikInstance;\n      }\n      return new ImagekitService({\n        urlEndpoint: this.urlEndpoint,\n        publicKey: this.publicKey\n      })._ikInstance;\n    }\n    handleUploadResponse(err, result, options, progressCb) {\n      if (err) {\n        this.throwError(err, options);\n      } else {\n        if (options.onSuccess instanceof EventEmitter) {\n          options.onSuccess.emit(result);\n        }\n        if (options.xhr) options.xhr.upload.removeEventListener('progress', progressCb);\n      }\n    }\n    createUploadProgressMonitor(xhr) {\n      const progressCb = e => {\n        if (this.onUploadProgress && typeof this.onUploadProgress === 'function') {\n          // Custom upload-progress tracker\n          this.onUploadProgress(e);\n        }\n      };\n      if (xhr) xhr.upload.addEventListener('progress', progressCb);\n      return progressCb;\n    }\n    getUploadParams(options) {\n      const params = {\n        file: options.file,\n        fileName: options.fileName\n      };\n      if (options.useUniqueFileName !== undefined) {\n        Object.assign(params, {\n          useUniqueFileName: options.useUniqueFileName\n        });\n      }\n      if (options.folder !== undefined) {\n        Object.assign(params, {\n          folder: options.folder\n        });\n      }\n      if (options.customMetadata !== undefined) {\n        Object.assign(params, {\n          customMetadata: options.customMetadata\n        });\n      }\n      if (options.webhookUrl !== undefined) {\n        Object.assign(params, {\n          webhookUrl: options.webhookUrl\n        });\n      }\n      if (options.isPrivateFile !== undefined) {\n        Object.assign(params, {\n          isPrivateFile: options.isPrivateFile\n        });\n      }\n      if (options.overwriteFile !== undefined) {\n        Object.assign(params, {\n          overwriteFile: options.overwriteFile\n        });\n      }\n      if (options.overwriteAITags !== undefined) {\n        Object.assign(params, {\n          overwriteAITags: options.overwriteAITags\n        });\n      }\n      if (options.overwriteTags !== undefined) {\n        Object.assign(params, {\n          overwriteTags: options.overwriteTags\n        });\n      }\n      if (options.overwriteCustomMetadata !== undefined) {\n        Object.assign(params, {\n          overwriteCustomMetadata: options.overwriteCustomMetadata\n        });\n      }\n      if (options.tags !== undefined) {\n        Object.assign(params, {\n          tags: options.tags\n        });\n      }\n      if (options.customCoordinates !== undefined) {\n        Object.assign(params, {\n          customCoordinates: options.customCoordinates\n        });\n      }\n      if (options.responseFields !== undefined) {\n        Object.assign(params, {\n          responseFields: options.responseFields\n        });\n      }\n      if (options.extensions !== undefined) {\n        Object.assign(params, {\n          extensions: options.extensions\n        });\n      }\n      if (options.xhr !== undefined) {\n        Object.assign(params, {\n          xhr: options.xhr\n        });\n      }\n      if (options.transformation !== undefined) {\n        Object.assign(params, {\n          transformation: options.transformation\n        });\n      }\n      if (options.checks !== undefined) {\n        Object.assign(params, {\n          checks: options.checks\n        });\n      }\n      return params;\n    }\n  }\n  IkUploadComponent.ɵfac = function IkUploadComponent_Factory(t) {\n    return new (t || IkUploadComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ImagekitService));\n  };\n  IkUploadComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: IkUploadComponent,\n    selectors: [[\"ik-upload\"]],\n    inputs: {\n      fileName: \"fileName\",\n      useUniqueFileName: \"useUniqueFileName\",\n      tags: \"tags\",\n      folder: \"folder\",\n      publicKey: \"publicKey\",\n      urlEndpoint: \"urlEndpoint\",\n      authenticator: \"authenticator\",\n      isPrivateFile: \"isPrivateFile\",\n      overwriteFile: \"overwriteFile\",\n      overwriteAITags: \"overwriteAITags\",\n      overwriteTags: \"overwriteTags\",\n      overwriteCustomMetadata: \"overwriteCustomMetadata\",\n      customCoordinates: \"customCoordinates\",\n      webhookUrl: \"webhookUrl\",\n      responseFields: \"responseFields\",\n      extensions: \"extensions\",\n      customMetadata: \"customMetadata\",\n      buttonRef: \"buttonRef\",\n      validateFile: \"validateFile\",\n      onUploadStart: \"onUploadStart\",\n      onUploadProgress: \"onUploadProgress\",\n      transformation: \"transformation\",\n      checks: \"checks\"\n    },\n    outputs: {\n      onError: \"onError\",\n      onSuccess: \"onSuccess\"\n    },\n    features: [i0.ɵɵProvidersFeature([ImagekitService])],\n    decls: 3,\n    vars: 2,\n    consts: [[\"type\", \"file\", \"style\", \"display:none\", 3, \"change\", 4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [\"type\", \"file\", 2, \"display\", \"none\", 3, \"change\"], [\"type\", \"file\", 3, \"change\"]],\n    template: function IkUploadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, IkUploadComponent_input_0_Template, 1, 0, \"input\", 0);\n        i0.ɵɵtemplate(1, IkUploadComponent_ng_template_1_Template, 1, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.buttonRef)(\"ngIfElse\", _r1);\n      }\n    },\n    dependencies: [i2.NgIf],\n    encapsulation: 2\n  });\n  return IkUploadComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ImagekitioAngularModule = /*#__PURE__*/(() => {\n  class ImagekitioAngularModule {\n    static forRoot(config) {\n      return {\n        ngModule: ImagekitioAngularModule,\n        providers: [{\n          provide: ImageKitConfiguration,\n          useValue: config\n        }]\n      };\n    }\n  }\n  ImagekitioAngularModule.ɵfac = function ImagekitioAngularModule_Factory(t) {\n    return new (t || ImagekitioAngularModule)();\n  };\n  ImagekitioAngularModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ImagekitioAngularModule\n  });\n  ImagekitioAngularModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ImagekitService],\n    imports: [[CommonModule]]\n  });\n  return ImagekitioAngularModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of imagekitio-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IkImageComponent, IkUploadComponent, IkVideoComponent, ImageKitConfiguration, ImagekitService, ImagekitioAngularModule };\n//# sourceMappingURL=imagekitio-angular.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}